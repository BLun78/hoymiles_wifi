// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: protos/SetConfig.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Definition of the response message for setting configuration.
type SetConfigResDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset             int32  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`                                                    // Offset value
	Time               uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`                                                        // Time value
	LockPassword       int32  `protobuf:"varint,3,opt,name=lock_password,json=lockPassword,proto3" json:"lock_password,omitempty"`                    // Lock password
	LockTime           int32  `protobuf:"varint,4,opt,name=lock_time,json=lockTime,proto3" json:"lock_time,omitempty"`                                // Lock time
	LimitPowerMypower  int32  `protobuf:"varint,5,opt,name=limit_power_mypower,json=limitPowerMypower,proto3" json:"limit_power_mypower,omitempty"`   // Limit power for mypower
	ZeroExport_433Addr int32  `protobuf:"varint,6,opt,name=zero_export_433_addr,json=zeroExport433Addr,proto3" json:"zero_export_433_addr,omitempty"` // Zero export 433 address
	ZeroExportEnable   int32  `protobuf:"varint,7,opt,name=zero_export_enable,json=zeroExportEnable,proto3" json:"zero_export_enable,omitempty"`      // Zero export enable flag
	NetmodeSelect      int32  `protobuf:"varint,8,opt,name=netmode_select,json=netmodeSelect,proto3" json:"netmode_select,omitempty"`                 // Network mode selection
	ChannelSelect      int32  `protobuf:"varint,9,opt,name=channel_select,json=channelSelect,proto3" json:"channel_select,omitempty"`                 // Channel selection
	ServerSendTime     int32  `protobuf:"varint,10,opt,name=server_send_time,json=serverSendTime,proto3" json:"server_send_time,omitempty"`           // Server send time
	Serverport         int32  `protobuf:"varint,11,opt,name=serverport,proto3" json:"serverport,omitempty"`                                           // Server port
	ApnSet             string `protobuf:"bytes,12,opt,name=apn_set,json=apnSet,proto3" json:"apn_set,omitempty"`                                      // Access Point Name (APN) setting
	MeterKind          string `protobuf:"bytes,13,opt,name=meter_kind,json=meterKind,proto3" json:"meter_kind,omitempty"`                             // Meter kind
	MeterInterface     string `protobuf:"bytes,14,opt,name=meter_interface,json=meterInterface,proto3" json:"meter_interface,omitempty"`              // Meter interface
	WifiSsid           string `protobuf:"bytes,15,opt,name=wifi_ssid,json=wifiSsid,proto3" json:"wifi_ssid,omitempty"`                                // Wi-Fi SSID
	WifiPassword       string `protobuf:"bytes,16,opt,name=wifi_password,json=wifiPassword,proto3" json:"wifi_password,omitempty"`                    // Wi-Fi password
	ServerDomainName   string `protobuf:"bytes,17,opt,name=server_domain_name,json=serverDomainName,proto3" json:"server_domain_name,omitempty"`      // Server domain name
	InvType            int32  `protobuf:"varint,18,opt,name=inv_type,json=invType,proto3" json:"inv_type,omitempty"`                                  // Inverter type
	DtuSn              string `protobuf:"bytes,19,opt,name=dtu_sn,json=dtuSn,proto3" json:"dtu_sn,omitempty"`                                         // Data Terminal Unit (DTU) serial number
	AccessModel        int32  `protobuf:"varint,20,opt,name=access_model,json=accessModel,proto3" json:"access_model,omitempty"`                      // Access model
	Mac_0              int32  `protobuf:"varint,21,opt,name=mac_0,json=mac0,proto3" json:"mac_0,omitempty"`                                           // MAC address octet 0
	Mac_1              int32  `protobuf:"varint,22,opt,name=mac_1,json=mac1,proto3" json:"mac_1,omitempty"`                                           // MAC address octet 1
	Mac_2              int32  `protobuf:"varint,23,opt,name=mac_2,json=mac2,proto3" json:"mac_2,omitempty"`                                           // MAC address octet 2
	Mac_3              int32  `protobuf:"varint,24,opt,name=mac_3,json=mac3,proto3" json:"mac_3,omitempty"`                                           // MAC address octet 3
	DhcpSwitch         int32  `protobuf:"varint,25,opt,name=dhcp_switch,json=dhcpSwitch,proto3" json:"dhcp_switch,omitempty"`                         // DHCP switch
	IpAddr_0           int32  `protobuf:"varint,26,opt,name=ip_addr_0,json=ipAddr0,proto3" json:"ip_addr_0,omitempty"`                                // IP address octet 0
	IpAddr_1           int32  `protobuf:"varint,27,opt,name=ip_addr_1,json=ipAddr1,proto3" json:"ip_addr_1,omitempty"`                                // IP address octet 1
	IpAddr_2           int32  `protobuf:"varint,28,opt,name=ip_addr_2,json=ipAddr2,proto3" json:"ip_addr_2,omitempty"`                                // IP address octet 2
	IpAddr_3           int32  `protobuf:"varint,29,opt,name=ip_addr_3,json=ipAddr3,proto3" json:"ip_addr_3,omitempty"`                                // IP address octet 3
	SubnetMask_0       int32  `protobuf:"varint,30,opt,name=subnet_mask_0,json=subnetMask0,proto3" json:"subnet_mask_0,omitempty"`                    // Subnet mask octet 0
	SubnetMask_1       int32  `protobuf:"varint,31,opt,name=subnet_mask_1,json=subnetMask1,proto3" json:"subnet_mask_1,omitempty"`                    // Subnet mask octet 1
	SubnetMask_2       int32  `protobuf:"varint,32,opt,name=subnet_mask_2,json=subnetMask2,proto3" json:"subnet_mask_2,omitempty"`                    // Subnet mask octet 2
	SubnetMask_3       int32  `protobuf:"varint,33,opt,name=subnet_mask_3,json=subnetMask3,proto3" json:"subnet_mask_3,omitempty"`                    // Subnet mask octet 3
	DefaultGateway_0   int32  `protobuf:"varint,34,opt,name=default_gateway_0,json=defaultGateway0,proto3" json:"default_gateway_0,omitempty"`        // Default gateway octet 0
	DefaultGateway_1   int32  `protobuf:"varint,35,opt,name=default_gateway_1,json=defaultGateway1,proto3" json:"default_gateway_1,omitempty"`        // Default gateway octet 1
	DefaultGateway_2   int32  `protobuf:"varint,36,opt,name=default_gateway_2,json=defaultGateway2,proto3" json:"default_gateway_2,omitempty"`        // Default gateway octet 2
	DefaultGateway_3   int32  `protobuf:"varint,37,opt,name=default_gateway_3,json=defaultGateway3,proto3" json:"default_gateway_3,omitempty"`        // Default gateway octet 3
	ApnName            string `protobuf:"bytes,38,opt,name=apn_name,json=apnName,proto3" json:"apn_name,omitempty"`                                   // APN name
	ApnPassword        string `protobuf:"bytes,39,opt,name=apn_password,json=apnPassword,proto3" json:"apn_password,omitempty"`                       // APN password
	Sub1GSweepSwitch   int32  `protobuf:"varint,40,opt,name=sub1g_sweep_switch,json=sub1gSweepSwitch,proto3" json:"sub1g_sweep_switch,omitempty"`     // Sub-1GHz sweep switch
	Sub1GWorkChannel   int32  `protobuf:"varint,41,opt,name=sub1g_work_channel,json=sub1gWorkChannel,proto3" json:"sub1g_work_channel,omitempty"`     // Sub-1GHz work channel
	CableDns_0         int32  `protobuf:"varint,42,opt,name=cable_dns_0,json=cableDns0,proto3" json:"cable_dns_0,omitempty"`                          // Cable DNS octet 0
	CableDns_1         int32  `protobuf:"varint,43,opt,name=cable_dns_1,json=cableDns1,proto3" json:"cable_dns_1,omitempty"`                          // Cable DNS octet 1
	CableDns_2         int32  `protobuf:"varint,44,opt,name=cable_dns_2,json=cableDns2,proto3" json:"cable_dns_2,omitempty"`                          // Cable DNS octet 2
	CableDns_3         int32  `protobuf:"varint,45,opt,name=cable_dns_3,json=cableDns3,proto3" json:"cable_dns_3,omitempty"`                          // Cable DNS octet 3
	Mac_4              int32  `protobuf:"varint,46,opt,name=mac_4,json=mac4,proto3" json:"mac_4,omitempty"`                                           // MAC address octet 4
	Mac_5              int32  `protobuf:"varint,47,opt,name=mac_5,json=mac5,proto3" json:"mac_5,omitempty"`                                           // MAC address octet 5
	DtuApSsid          string `protobuf:"bytes,48,opt,name=dtu_ap_ssid,json=dtuApSsid,proto3" json:"dtu_ap_ssid,omitempty"`                           // DTU AP SSID
	DtuApPass          string `protobuf:"bytes,49,opt,name=dtu_ap_pass,json=dtuApPass,proto3" json:"dtu_ap_pass,omitempty"`                           // DTU AP password
	AppPage            int32  `protobuf:"varint,50,opt,name=app_page,json=appPage,proto3" json:"app_page,omitempty"`                                  // App page
}

func (x *SetConfigResDTO) Reset() {
	*x = SetConfigResDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_SetConfig_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigResDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigResDTO) ProtoMessage() {}

func (x *SetConfigResDTO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_SetConfig_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigResDTO.ProtoReflect.Descriptor instead.
func (*SetConfigResDTO) Descriptor() ([]byte, []int) {
	return file_protos_SetConfig_proto_rawDescGZIP(), []int{0}
}

func (x *SetConfigResDTO) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SetConfigResDTO) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SetConfigResDTO) GetLockPassword() int32 {
	if x != nil {
		return x.LockPassword
	}
	return 0
}

func (x *SetConfigResDTO) GetLockTime() int32 {
	if x != nil {
		return x.LockTime
	}
	return 0
}

func (x *SetConfigResDTO) GetLimitPowerMypower() int32 {
	if x != nil {
		return x.LimitPowerMypower
	}
	return 0
}

func (x *SetConfigResDTO) GetZeroExport_433Addr() int32 {
	if x != nil {
		return x.ZeroExport_433Addr
	}
	return 0
}

func (x *SetConfigResDTO) GetZeroExportEnable() int32 {
	if x != nil {
		return x.ZeroExportEnable
	}
	return 0
}

func (x *SetConfigResDTO) GetNetmodeSelect() int32 {
	if x != nil {
		return x.NetmodeSelect
	}
	return 0
}

func (x *SetConfigResDTO) GetChannelSelect() int32 {
	if x != nil {
		return x.ChannelSelect
	}
	return 0
}

func (x *SetConfigResDTO) GetServerSendTime() int32 {
	if x != nil {
		return x.ServerSendTime
	}
	return 0
}

func (x *SetConfigResDTO) GetServerport() int32 {
	if x != nil {
		return x.Serverport
	}
	return 0
}

func (x *SetConfigResDTO) GetApnSet() string {
	if x != nil {
		return x.ApnSet
	}
	return ""
}

func (x *SetConfigResDTO) GetMeterKind() string {
	if x != nil {
		return x.MeterKind
	}
	return ""
}

func (x *SetConfigResDTO) GetMeterInterface() string {
	if x != nil {
		return x.MeterInterface
	}
	return ""
}

func (x *SetConfigResDTO) GetWifiSsid() string {
	if x != nil {
		return x.WifiSsid
	}
	return ""
}

func (x *SetConfigResDTO) GetWifiPassword() string {
	if x != nil {
		return x.WifiPassword
	}
	return ""
}

func (x *SetConfigResDTO) GetServerDomainName() string {
	if x != nil {
		return x.ServerDomainName
	}
	return ""
}

func (x *SetConfigResDTO) GetInvType() int32 {
	if x != nil {
		return x.InvType
	}
	return 0
}

func (x *SetConfigResDTO) GetDtuSn() string {
	if x != nil {
		return x.DtuSn
	}
	return ""
}

func (x *SetConfigResDTO) GetAccessModel() int32 {
	if x != nil {
		return x.AccessModel
	}
	return 0
}

func (x *SetConfigResDTO) GetMac_0() int32 {
	if x != nil {
		return x.Mac_0
	}
	return 0
}

func (x *SetConfigResDTO) GetMac_1() int32 {
	if x != nil {
		return x.Mac_1
	}
	return 0
}

func (x *SetConfigResDTO) GetMac_2() int32 {
	if x != nil {
		return x.Mac_2
	}
	return 0
}

func (x *SetConfigResDTO) GetMac_3() int32 {
	if x != nil {
		return x.Mac_3
	}
	return 0
}

func (x *SetConfigResDTO) GetDhcpSwitch() int32 {
	if x != nil {
		return x.DhcpSwitch
	}
	return 0
}

func (x *SetConfigResDTO) GetIpAddr_0() int32 {
	if x != nil {
		return x.IpAddr_0
	}
	return 0
}

func (x *SetConfigResDTO) GetIpAddr_1() int32 {
	if x != nil {
		return x.IpAddr_1
	}
	return 0
}

func (x *SetConfigResDTO) GetIpAddr_2() int32 {
	if x != nil {
		return x.IpAddr_2
	}
	return 0
}

func (x *SetConfigResDTO) GetIpAddr_3() int32 {
	if x != nil {
		return x.IpAddr_3
	}
	return 0
}

func (x *SetConfigResDTO) GetSubnetMask_0() int32 {
	if x != nil {
		return x.SubnetMask_0
	}
	return 0
}

func (x *SetConfigResDTO) GetSubnetMask_1() int32 {
	if x != nil {
		return x.SubnetMask_1
	}
	return 0
}

func (x *SetConfigResDTO) GetSubnetMask_2() int32 {
	if x != nil {
		return x.SubnetMask_2
	}
	return 0
}

func (x *SetConfigResDTO) GetSubnetMask_3() int32 {
	if x != nil {
		return x.SubnetMask_3
	}
	return 0
}

func (x *SetConfigResDTO) GetDefaultGateway_0() int32 {
	if x != nil {
		return x.DefaultGateway_0
	}
	return 0
}

func (x *SetConfigResDTO) GetDefaultGateway_1() int32 {
	if x != nil {
		return x.DefaultGateway_1
	}
	return 0
}

func (x *SetConfigResDTO) GetDefaultGateway_2() int32 {
	if x != nil {
		return x.DefaultGateway_2
	}
	return 0
}

func (x *SetConfigResDTO) GetDefaultGateway_3() int32 {
	if x != nil {
		return x.DefaultGateway_3
	}
	return 0
}

func (x *SetConfigResDTO) GetApnName() string {
	if x != nil {
		return x.ApnName
	}
	return ""
}

func (x *SetConfigResDTO) GetApnPassword() string {
	if x != nil {
		return x.ApnPassword
	}
	return ""
}

func (x *SetConfigResDTO) GetSub1GSweepSwitch() int32 {
	if x != nil {
		return x.Sub1GSweepSwitch
	}
	return 0
}

func (x *SetConfigResDTO) GetSub1GWorkChannel() int32 {
	if x != nil {
		return x.Sub1GWorkChannel
	}
	return 0
}

func (x *SetConfigResDTO) GetCableDns_0() int32 {
	if x != nil {
		return x.CableDns_0
	}
	return 0
}

func (x *SetConfigResDTO) GetCableDns_1() int32 {
	if x != nil {
		return x.CableDns_1
	}
	return 0
}

func (x *SetConfigResDTO) GetCableDns_2() int32 {
	if x != nil {
		return x.CableDns_2
	}
	return 0
}

func (x *SetConfigResDTO) GetCableDns_3() int32 {
	if x != nil {
		return x.CableDns_3
	}
	return 0
}

func (x *SetConfigResDTO) GetMac_4() int32 {
	if x != nil {
		return x.Mac_4
	}
	return 0
}

func (x *SetConfigResDTO) GetMac_5() int32 {
	if x != nil {
		return x.Mac_5
	}
	return 0
}

func (x *SetConfigResDTO) GetDtuApSsid() string {
	if x != nil {
		return x.DtuApSsid
	}
	return ""
}

func (x *SetConfigResDTO) GetDtuApPass() string {
	if x != nil {
		return x.DtuApPass
	}
	return ""
}

func (x *SetConfigResDTO) GetAppPage() int32 {
	if x != nil {
		return x.AppPage
	}
	return 0
}

// Definition of the request message for setting configuration.
type SetConfigReqDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset    int32  `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`                        // Offset value
	Time      uint32 `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`                            // Time value
	ErrorCode int32  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"` // Error code
}

func (x *SetConfigReqDTO) Reset() {
	*x = SetConfigReqDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_SetConfig_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetConfigReqDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetConfigReqDTO) ProtoMessage() {}

func (x *SetConfigReqDTO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_SetConfig_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetConfigReqDTO.ProtoReflect.Descriptor instead.
func (*SetConfigReqDTO) Descriptor() ([]byte, []int) {
	return file_protos_SetConfig_proto_rawDescGZIP(), []int{1}
}

func (x *SetConfigReqDTO) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *SetConfigReqDTO) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *SetConfigReqDTO) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

var File_protos_SetConfig_proto protoreflect.FileDescriptor

var file_protos_SetConfig_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x0d, 0x0a, 0x0f, 0x53, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x44, 0x54, 0x4f, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6d, 0x79, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x4d, 0x79, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x14, 0x7a, 0x65,
	0x72, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x34, 0x33, 0x33, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x7a, 0x65, 0x72, 0x6f, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x34, 0x33, 0x33, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x7a,
	0x65, 0x72, 0x6f, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x7a, 0x65, 0x72, 0x6f, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x65, 0x74,
	0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x61, 0x70, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73, 0x73, 0x69, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x69, 0x66, 0x69, 0x53, 0x73, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x69, 0x66, 0x69, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x6e, 0x76, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x64, 0x74, 0x75, 0x5f, 0x73, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64,
	0x74, 0x75, 0x53, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61, 0x63, 0x5f, 0x30,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x63, 0x30, 0x12, 0x13, 0x0a, 0x05,
	0x6d, 0x61, 0x63, 0x5f, 0x31, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x63,
	0x31, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61, 0x63, 0x5f, 0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x6d, 0x61, 0x63, 0x32, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61, 0x63, 0x5f, 0x33, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x63, 0x33, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x68, 0x63, 0x70, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x64, 0x68, 0x63, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x09,
	0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x30, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x30, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x31, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x31, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x32, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x32,
	0x12, 0x1a, 0x0a, 0x09, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x33, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x33, 0x12, 0x22, 0x0a, 0x0d,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x30, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x30,
	0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f,
	0x31, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x6b, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x32, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x32, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x33, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x6b, 0x33, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x30, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x30, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x31, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x31, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x32, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x32,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x33, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x33, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x70, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x70, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x70, 0x6e, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61,
	0x70, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75,
	0x62, 0x31, 0x67, 0x5f, 0x73, 0x77, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x62, 0x31, 0x67, 0x53, 0x77, 0x65,
	0x65, 0x70, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x75, 0x62, 0x31,
	0x67, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x75, 0x62, 0x31, 0x67, 0x57, 0x6f, 0x72, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x6e, 0x73, 0x5f, 0x30, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x6e, 0x73, 0x30, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x6e, 0x73, 0x5f, 0x31, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x6e, 0x73, 0x31, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x6e, 0x73, 0x5f, 0x32, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x6e, 0x73, 0x32, 0x12, 0x1e, 0x0a, 0x0b, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x64, 0x6e, 0x73, 0x5f, 0x33, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x44, 0x6e, 0x73, 0x33, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61, 0x63, 0x5f, 0x34, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x63, 0x34, 0x12, 0x13, 0x0a, 0x05, 0x6d,
	0x61, 0x63, 0x5f, 0x35, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x63, 0x35,
	0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x74, 0x75, 0x5f, 0x61, 0x70, 0x5f, 0x73, 0x73, 0x69, 0x64, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x74, 0x75, 0x41, 0x70, 0x53, 0x73, 0x69, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x64, 0x74, 0x75, 0x5f, 0x61, 0x70, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x18,
	0x31, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x74, 0x75, 0x41, 0x70, 0x50, 0x61, 0x73, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x61, 0x70, 0x70, 0x50, 0x61, 0x67, 0x65, 0x22, 0x5c, 0x0a, 0x0f, 0x53,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x44, 0x54, 0x4f, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x23, 0x5a, 0x0f, 0x68, 0x6f, 0x79,
	0x6d, 0x69, 0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xaa, 0x02, 0x0f, 0x48,
	0x6f, 0x79, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_SetConfig_proto_rawDescOnce sync.Once
	file_protos_SetConfig_proto_rawDescData = file_protos_SetConfig_proto_rawDesc
)

func file_protos_SetConfig_proto_rawDescGZIP() []byte {
	file_protos_SetConfig_proto_rawDescOnce.Do(func() {
		file_protos_SetConfig_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_SetConfig_proto_rawDescData)
	})
	return file_protos_SetConfig_proto_rawDescData
}

var file_protos_SetConfig_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_protos_SetConfig_proto_goTypes = []any{
	(*SetConfigResDTO)(nil), // 0: SetConfigResDTO
	(*SetConfigReqDTO)(nil), // 1: SetConfigReqDTO
}
var file_protos_SetConfig_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protos_SetConfig_proto_init() }
func file_protos_SetConfig_proto_init() {
	if File_protos_SetConfig_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_SetConfig_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*SetConfigResDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_SetConfig_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*SetConfigReqDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_SetConfig_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_SetConfig_proto_goTypes,
		DependencyIndexes: file_protos_SetConfig_proto_depIdxs,
		MessageInfos:      file_protos_SetConfig_proto_msgTypes,
	}.Build()
	File_protos_SetConfig_proto = out.File
	file_protos_SetConfig_proto_rawDesc = nil
	file_protos_SetConfig_proto_goTypes = nil
	file_protos_SetConfig_proto_depIdxs = nil
}
