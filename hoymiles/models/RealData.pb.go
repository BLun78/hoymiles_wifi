// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: protos/RealData.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeterDataMO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceKind           int32 `protobuf:"varint,1,opt,name=device_kind,json=deviceKind,proto3" json:"device_kind,omitempty"`                                 // Device kind identifier
	MeterSn              int64 `protobuf:"varint,2,opt,name=meter_sn,json=meterSn,proto3" json:"meter_sn,omitempty"`                                          // Meter serial number
	MeterTotalPower      int32 `protobuf:"varint,3,opt,name=meter_total_power,json=meterTotalPower,proto3" json:"meter_total_power,omitempty"`                // Total power by the meter (Watts)
	MeterPhase_APower    int32 `protobuf:"varint,4,opt,name=meter_phase_A_power,json=meterPhaseAPower,proto3" json:"meter_phase_A_power,omitempty"`           // Power in phase A (Watts)
	MeterPhase_BPower    int32 `protobuf:"varint,5,opt,name=meter_phase_B_power,json=meterPhaseBPower,proto3" json:"meter_phase_B_power,omitempty"`           // Power in phase B (Watts)
	MeterPhase_CPower    int32 `protobuf:"varint,6,opt,name=meter_phase_C_power,json=meterPhaseCPower,proto3" json:"meter_phase_C_power,omitempty"`           // Power in phase C (Watts)
	MeterFactor          int32 `protobuf:"varint,7,opt,name=meter_factor,json=meterFactor,proto3" json:"meter_factor,omitempty"`                              // Meter factor
	MeterTotalEnergy     int32 `protobuf:"varint,8,opt,name=meter_total_energy,json=meterTotalEnergy,proto3" json:"meter_total_energy,omitempty"`             // Total energy produced by the meter (Watt-hours)
	MeterPhase_AEnergy   int32 `protobuf:"varint,9,opt,name=meter_phase_A_energy,json=meterPhaseAEnergy,proto3" json:"meter_phase_A_energy,omitempty"`        // Energy produced in phase A (Watt-hours)
	MeterPhase_BEnergy   int32 `protobuf:"varint,10,opt,name=meter_phase_B_energy,json=meterPhaseBEnergy,proto3" json:"meter_phase_B_energy,omitempty"`       // Energy produced in phase B (Watt-hours)
	MeterPhase_CEnergy   int32 `protobuf:"varint,11,opt,name=meter_phase_C_energy,json=meterPhaseCEnergy,proto3" json:"meter_phase_C_energy,omitempty"`       // Energy produced in phase C (Watt-hours)
	MeterTotalConsumed   int32 `protobuf:"varint,12,opt,name=meter_total_consumed,json=meterTotalConsumed,proto3" json:"meter_total_consumed,omitempty"`      // Total energy consumed (Watt-hours)
	MeterPhase_AConsumed int32 `protobuf:"varint,13,opt,name=meter_phase_A_consumed,json=meterPhaseAConsumed,proto3" json:"meter_phase_A_consumed,omitempty"` // Energy consumed in phase A (Watt-hours)
	MeterPhase_BConsumed int32 `protobuf:"varint,14,opt,name=meter_phase_B_consumed,json=meterPhaseBConsumed,proto3" json:"meter_phase_B_consumed,omitempty"` // Energy consumed in phase B (Watt-hours)
	MeterPhase_CConsumed int32 `protobuf:"varint,15,opt,name=meter_phase_C_consumed,json=meterPhaseCConsumed,proto3" json:"meter_phase_C_consumed,omitempty"` // Energy consumed in phase C (Watt-hours)
	MeterFault           int32 `protobuf:"varint,16,opt,name=meter_fault,json=meterFault,proto3" json:"meter_fault,omitempty"`                                // Meter fault code
}

func (x *MeterDataMO) Reset() {
	*x = MeterDataMO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealData_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeterDataMO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterDataMO) ProtoMessage() {}

func (x *MeterDataMO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealData_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterDataMO.ProtoReflect.Descriptor instead.
func (*MeterDataMO) Descriptor() ([]byte, []int) {
	return file_protos_RealData_proto_rawDescGZIP(), []int{0}
}

func (x *MeterDataMO) GetDeviceKind() int32 {
	if x != nil {
		return x.DeviceKind
	}
	return 0
}

func (x *MeterDataMO) GetMeterSn() int64 {
	if x != nil {
		return x.MeterSn
	}
	return 0
}

func (x *MeterDataMO) GetMeterTotalPower() int32 {
	if x != nil {
		return x.MeterTotalPower
	}
	return 0
}

func (x *MeterDataMO) GetMeterPhase_APower() int32 {
	if x != nil {
		return x.MeterPhase_APower
	}
	return 0
}

func (x *MeterDataMO) GetMeterPhase_BPower() int32 {
	if x != nil {
		return x.MeterPhase_BPower
	}
	return 0
}

func (x *MeterDataMO) GetMeterPhase_CPower() int32 {
	if x != nil {
		return x.MeterPhase_CPower
	}
	return 0
}

func (x *MeterDataMO) GetMeterFactor() int32 {
	if x != nil {
		return x.MeterFactor
	}
	return 0
}

func (x *MeterDataMO) GetMeterTotalEnergy() int32 {
	if x != nil {
		return x.MeterTotalEnergy
	}
	return 0
}

func (x *MeterDataMO) GetMeterPhase_AEnergy() int32 {
	if x != nil {
		return x.MeterPhase_AEnergy
	}
	return 0
}

func (x *MeterDataMO) GetMeterPhase_BEnergy() int32 {
	if x != nil {
		return x.MeterPhase_BEnergy
	}
	return 0
}

func (x *MeterDataMO) GetMeterPhase_CEnergy() int32 {
	if x != nil {
		return x.MeterPhase_CEnergy
	}
	return 0
}

func (x *MeterDataMO) GetMeterTotalConsumed() int32 {
	if x != nil {
		return x.MeterTotalConsumed
	}
	return 0
}

func (x *MeterDataMO) GetMeterPhase_AConsumed() int32 {
	if x != nil {
		return x.MeterPhase_AConsumed
	}
	return 0
}

func (x *MeterDataMO) GetMeterPhase_BConsumed() int32 {
	if x != nil {
		return x.MeterPhase_BConsumed
	}
	return 0
}

func (x *MeterDataMO) GetMeterPhase_CConsumed() int32 {
	if x != nil {
		return x.MeterPhase_CConsumed
	}
	return 0
}

func (x *MeterDataMO) GetMeterFault() int32 {
	if x != nil {
		return x.MeterFault
	}
	return 0
}

type RpDataMO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RpSn         int64 `protobuf:"varint,1,opt,name=rp_sn,json=rpSn,proto3" json:"rp_sn,omitempty"`                           // RP serial number
	RpSignal     int32 `protobuf:"varint,2,opt,name=rp_signal,json=rpSignal,proto3" json:"rp_signal,omitempty"`               // RP signal strength
	RpChannel    int32 `protobuf:"varint,3,opt,name=rp_channel,json=rpChannel,proto3" json:"rp_channel,omitempty"`            // RP channel number
	RpLinkNub    int32 `protobuf:"varint,4,opt,name=rp_link_nub,json=rpLinkNub,proto3" json:"rp_link_nub,omitempty"`          // RP link number
	RpLinkStatus int32 `protobuf:"varint,5,opt,name=rp_link_status,json=rpLinkStatus,proto3" json:"rp_link_status,omitempty"` // RP link status
}

func (x *RpDataMO) Reset() {
	*x = RpDataMO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealData_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpDataMO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpDataMO) ProtoMessage() {}

func (x *RpDataMO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealData_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpDataMO.ProtoReflect.Descriptor instead.
func (*RpDataMO) Descriptor() ([]byte, []int) {
	return file_protos_RealData_proto_rawDescGZIP(), []int{1}
}

func (x *RpDataMO) GetRpSn() int64 {
	if x != nil {
		return x.RpSn
	}
	return 0
}

func (x *RpDataMO) GetRpSignal() int32 {
	if x != nil {
		return x.RpSignal
	}
	return 0
}

func (x *RpDataMO) GetRpChannel() int32 {
	if x != nil {
		return x.RpChannel
	}
	return 0
}

func (x *RpDataMO) GetRpLinkNub() int32 {
	if x != nil {
		return x.RpLinkNub
	}
	return 0
}

func (x *RpDataMO) GetRpLinkStatus() int32 {
	if x != nil {
		return x.RpLinkStatus
	}
	return 0
}

type PvDataMO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PvSn           int64 `protobuf:"varint,1,opt,name=pv_sn,json=pvSn,proto3" json:"pv_sn,omitempty"`                                  // PV serial number
	PvPort         int32 `protobuf:"varint,2,opt,name=pv_port,json=pvPort,proto3" json:"pv_port,omitempty"`                            // PV port number
	PvVol          int32 `protobuf:"varint,3,opt,name=pv_vol,json=pvVol,proto3" json:"pv_vol,omitempty"`                               // PV voltage (Volts)
	PvCur          int32 `protobuf:"varint,4,opt,name=pv_cur,json=pvCur,proto3" json:"pv_cur,omitempty"`                               // PV current (Amperes)
	PvPower        int32 `protobuf:"varint,5,opt,name=pv_power,json=pvPower,proto3" json:"pv_power,omitempty"`                         // PV power (Watts)
	PvEnergyTotal  int32 `protobuf:"varint,6,opt,name=pv_energy_total,json=pvEnergyTotal,proto3" json:"pv_energy_total,omitempty"`     // Total energy generated by PV (Watt-hours)
	GridVol        int32 `protobuf:"varint,7,opt,name=grid_vol,json=gridVol,proto3" json:"grid_vol,omitempty"`                         // Grid voltage (Volts)
	GridVolMax     int32 `protobuf:"varint,8,opt,name=grid_vol_max,json=gridVolMax,proto3" json:"grid_vol_max,omitempty"`              // Maximum grid voltage (Volts)
	GridFreq       int32 `protobuf:"varint,9,opt,name=grid_freq,json=gridFreq,proto3" json:"grid_freq,omitempty"`                      // Grid frequency (Hertz)
	GridP          int32 `protobuf:"varint,10,opt,name=grid_p,json=gridP,proto3" json:"grid_p,omitempty"`                              // Grid active power (Watts)
	GridQ          int32 `protobuf:"varint,11,opt,name=grid_q,json=gridQ,proto3" json:"grid_q,omitempty"`                              // Grid reactive power (VAR)
	GridI          int32 `protobuf:"varint,12,opt,name=grid_i,json=gridI,proto3" json:"grid_i,omitempty"`                              // Grid current (Amperes)
	GridPf         int32 `protobuf:"varint,13,opt,name=grid_pf,json=gridPf,proto3" json:"grid_pf,omitempty"`                           // Grid power factor
	PvTemp         int32 `protobuf:"varint,14,opt,name=pv_temp,json=pvTemp,proto3" json:"pv_temp,omitempty"`                           // PV temperature
	PvRunStatus    int32 `protobuf:"varint,15,opt,name=pv_run_status,json=pvRunStatus,proto3" json:"pv_run_status,omitempty"`          // PV running status
	PvFaultNum     int32 `protobuf:"varint,16,opt,name=pv_fault_num,json=pvFaultNum,proto3" json:"pv_fault_num,omitempty"`             // PV fault number
	PvFaultCnt     int32 `protobuf:"varint,17,opt,name=pv_fault_cnt,json=pvFaultCnt,proto3" json:"pv_fault_cnt,omitempty"`             // PV fault count
	PvWarningCnt   int32 `protobuf:"varint,18,opt,name=pv_warning_cnt,json=pvWarningCnt,proto3" json:"pv_warning_cnt,omitempty"`       // PV warning count
	PvLinkStatus   int32 `protobuf:"varint,19,opt,name=pv_link_status,json=pvLinkStatus,proto3" json:"pv_link_status,omitempty"`       // PV link status
	PvSendPower    int32 `protobuf:"varint,20,opt,name=pv_send_power,json=pvSendPower,proto3" json:"pv_send_power,omitempty"`          // PV send power (Watts)
	PvReceivePower int32 `protobuf:"varint,21,opt,name=pv_receive_power,json=pvReceivePower,proto3" json:"pv_receive_power,omitempty"` // PV received power (Watts)
	PvTime         int32 `protobuf:"varint,22,opt,name=pv_time,json=pvTime,proto3" json:"pv_time,omitempty"`                           // PV time
	PvEnergy       int32 `protobuf:"varint,23,opt,name=pv_energy,json=pvEnergy,proto3" json:"pv_energy,omitempty"`                     // PV energy (Watt-hours)
	MiSignal       int32 `protobuf:"varint,24,opt,name=mi_signal,json=miSignal,proto3" json:"mi_signal,omitempty"`                     // Modulation index signal
}

func (x *PvDataMO) Reset() {
	*x = PvDataMO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealData_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvDataMO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvDataMO) ProtoMessage() {}

func (x *PvDataMO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealData_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvDataMO.ProtoReflect.Descriptor instead.
func (*PvDataMO) Descriptor() ([]byte, []int) {
	return file_protos_RealData_proto_rawDescGZIP(), []int{2}
}

func (x *PvDataMO) GetPvSn() int64 {
	if x != nil {
		return x.PvSn
	}
	return 0
}

func (x *PvDataMO) GetPvPort() int32 {
	if x != nil {
		return x.PvPort
	}
	return 0
}

func (x *PvDataMO) GetPvVol() int32 {
	if x != nil {
		return x.PvVol
	}
	return 0
}

func (x *PvDataMO) GetPvCur() int32 {
	if x != nil {
		return x.PvCur
	}
	return 0
}

func (x *PvDataMO) GetPvPower() int32 {
	if x != nil {
		return x.PvPower
	}
	return 0
}

func (x *PvDataMO) GetPvEnergyTotal() int32 {
	if x != nil {
		return x.PvEnergyTotal
	}
	return 0
}

func (x *PvDataMO) GetGridVol() int32 {
	if x != nil {
		return x.GridVol
	}
	return 0
}

func (x *PvDataMO) GetGridVolMax() int32 {
	if x != nil {
		return x.GridVolMax
	}
	return 0
}

func (x *PvDataMO) GetGridFreq() int32 {
	if x != nil {
		return x.GridFreq
	}
	return 0
}

func (x *PvDataMO) GetGridP() int32 {
	if x != nil {
		return x.GridP
	}
	return 0
}

func (x *PvDataMO) GetGridQ() int32 {
	if x != nil {
		return x.GridQ
	}
	return 0
}

func (x *PvDataMO) GetGridI() int32 {
	if x != nil {
		return x.GridI
	}
	return 0
}

func (x *PvDataMO) GetGridPf() int32 {
	if x != nil {
		return x.GridPf
	}
	return 0
}

func (x *PvDataMO) GetPvTemp() int32 {
	if x != nil {
		return x.PvTemp
	}
	return 0
}

func (x *PvDataMO) GetPvRunStatus() int32 {
	if x != nil {
		return x.PvRunStatus
	}
	return 0
}

func (x *PvDataMO) GetPvFaultNum() int32 {
	if x != nil {
		return x.PvFaultNum
	}
	return 0
}

func (x *PvDataMO) GetPvFaultCnt() int32 {
	if x != nil {
		return x.PvFaultCnt
	}
	return 0
}

func (x *PvDataMO) GetPvWarningCnt() int32 {
	if x != nil {
		return x.PvWarningCnt
	}
	return 0
}

func (x *PvDataMO) GetPvLinkStatus() int32 {
	if x != nil {
		return x.PvLinkStatus
	}
	return 0
}

func (x *PvDataMO) GetPvSendPower() int32 {
	if x != nil {
		return x.PvSendPower
	}
	return 0
}

func (x *PvDataMO) GetPvReceivePower() int32 {
	if x != nil {
		return x.PvReceivePower
	}
	return 0
}

func (x *PvDataMO) GetPvTime() int32 {
	if x != nil {
		return x.PvTime
	}
	return 0
}

func (x *PvDataMO) GetPvEnergy() int32 {
	if x != nil {
		return x.PvEnergy
	}
	return 0
}

func (x *PvDataMO) GetMiSignal() int32 {
	if x != nil {
		return x.MiSignal
	}
	return 0
}

type RealDataReqDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DtuSn          string         `protobuf:"bytes,1,opt,name=dtu_sn,json=dtuSn,proto3" json:"dtu_sn,omitempty"`                             // DTU serial number
	Timestamp      int32          `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                 // Timestamp of the data
	DeviceNumber   int32          `protobuf:"varint,3,opt,name=device_number,json=deviceNumber,proto3" json:"device_number,omitempty"`       // Device number
	PvNumber       int32          `protobuf:"varint,4,opt,name=pv_number,json=pvNumber,proto3" json:"pv_number,omitempty"`                   // PV number
	PackageNumber  int32          `protobuf:"varint,5,opt,name=package_number,json=packageNumber,proto3" json:"package_number,omitempty"`    // Package number
	CurrentPackage int32          `protobuf:"varint,6,opt,name=current_package,json=currentPackage,proto3" json:"current_package,omitempty"` // Current package number
	Csq            int32          `protobuf:"varint,7,opt,name=csq,proto3" json:"csq,omitempty"`                                             // Carrier Signal Quality (CSQ)
	MeterData      []*MeterDataMO `protobuf:"bytes,8,rep,name=meter_data,json=meterData,proto3" json:"meter_data,omitempty"`                 // Meter data array
	RpData         []*RpDataMO    `protobuf:"bytes,9,rep,name=rp_data,json=rpData,proto3" json:"rp_data,omitempty"`                          // RpDataMO data array
	PvData         []*PvDataMO    `protobuf:"bytes,10,rep,name=pv_data,json=pvData,proto3" json:"pv_data,omitempty"`                         // PvDataMO data array
	Version        int32          `protobuf:"varint,11,opt,name=version,proto3" json:"version,omitempty"`                                    // Version number
}

func (x *RealDataReqDTO) Reset() {
	*x = RealDataReqDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealData_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealDataReqDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealDataReqDTO) ProtoMessage() {}

func (x *RealDataReqDTO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealData_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealDataReqDTO.ProtoReflect.Descriptor instead.
func (*RealDataReqDTO) Descriptor() ([]byte, []int) {
	return file_protos_RealData_proto_rawDescGZIP(), []int{3}
}

func (x *RealDataReqDTO) GetDtuSn() string {
	if x != nil {
		return x.DtuSn
	}
	return ""
}

func (x *RealDataReqDTO) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RealDataReqDTO) GetDeviceNumber() int32 {
	if x != nil {
		return x.DeviceNumber
	}
	return 0
}

func (x *RealDataReqDTO) GetPvNumber() int32 {
	if x != nil {
		return x.PvNumber
	}
	return 0
}

func (x *RealDataReqDTO) GetPackageNumber() int32 {
	if x != nil {
		return x.PackageNumber
	}
	return 0
}

func (x *RealDataReqDTO) GetCurrentPackage() int32 {
	if x != nil {
		return x.CurrentPackage
	}
	return 0
}

func (x *RealDataReqDTO) GetCsq() int32 {
	if x != nil {
		return x.Csq
	}
	return 0
}

func (x *RealDataReqDTO) GetMeterData() []*MeterDataMO {
	if x != nil {
		return x.MeterData
	}
	return nil
}

func (x *RealDataReqDTO) GetRpData() []*RpDataMO {
	if x != nil {
		return x.RpData
	}
	return nil
}

func (x *RealDataReqDTO) GetPvData() []*PvDataMO {
	if x != nil {
		return x.PvData
	}
	return nil
}

func (x *RealDataReqDTO) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type RealDataResDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeYmdHms string `protobuf:"bytes,1,opt,name=time_ymd_hms,json=timeYmdHms,proto3" json:"time_ymd_hms,omitempty"` // Timestamp in the format YMD_HMS
	PackageNow int32  `protobuf:"varint,2,opt,name=package_now,json=packageNow,proto3" json:"package_now,omitempty"`  // Package now
	ErrorCode  int32  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`     // Error code indicator
	Offset     int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`                            // Offset value
	Time       int32  `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`                                // Timestamp value
}

func (x *RealDataResDTO) Reset() {
	*x = RealDataResDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealData_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealDataResDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealDataResDTO) ProtoMessage() {}

func (x *RealDataResDTO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealData_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealDataResDTO.ProtoReflect.Descriptor instead.
func (*RealDataResDTO) Descriptor() ([]byte, []int) {
	return file_protos_RealData_proto_rawDescGZIP(), []int{4}
}

func (x *RealDataResDTO) GetTimeYmdHms() string {
	if x != nil {
		return x.TimeYmdHms
	}
	return ""
}

func (x *RealDataResDTO) GetPackageNow() int32 {
	if x != nil {
		return x.PackageNow
	}
	return 0
}

func (x *RealDataResDTO) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *RealDataResDTO) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RealDataResDTO) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

var File_protos_RealData_proto protoreflect.FileDescriptor

var file_protos_RealData_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x52, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd8, 0x05, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x4f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x53, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x2d, 0x0a, 0x13, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x41,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2d,
	0x0a, 0x13, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x42, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x13, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x43, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x2f, 0x0a,
	0x14, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x41, 0x5f, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x2f,
	0x0a, 0x14, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x42, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12,
	0x2f, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x43,
	0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x12, 0x30, 0x0a, 0x14, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x41, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x42, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x42, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x43, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x08, 0x52, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x4f, 0x12,
	0x13, 0x0a, 0x05, 0x72, 0x70, 0x5f, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x72, 0x70, 0x53, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x70, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x70, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x70, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x70, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x75, 0x62, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x72, 0x70, 0x4c, 0x69, 0x6e, 0x6b, 0x4e, 0x75, 0x62,
	0x12, 0x24, 0x0a, 0x0e, 0x72, 0x70, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x70, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xcf, 0x05, 0x0a, 0x08, 0x50, 0x76, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x4f, 0x12, 0x13, 0x0a, 0x05, 0x70, 0x76, 0x5f, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x76, 0x53, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x76, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x76, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x76, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x70, 0x76, 0x56, 0x6f, 0x6c, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x76, 0x5f, 0x63,
	0x75, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x76, 0x43, 0x75, 0x72, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x76, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x70, 0x76, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x76,
	0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x76, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x20, 0x0a,
	0x0c, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x67, 0x72, 0x69, 0x64, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x67, 0x72, 0x69, 0x64, 0x46, 0x72, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06,
	0x67, 0x72, 0x69, 0x64, 0x5f, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72,
	0x69, 0x64, 0x50, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x71, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x69, 0x64, 0x51, 0x12, 0x15, 0x0a, 0x06, 0x67, 0x72,
	0x69, 0x64, 0x5f, 0x69, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x67, 0x72, 0x69, 0x64,
	0x49, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x70, 0x66, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x67, 0x72, 0x69, 0x64, 0x50, 0x66, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x76,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x76, 0x54,
	0x65, 0x6d, 0x70, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x76, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x76, 0x52, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x76, 0x5f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x76, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x76, 0x5f,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x70, 0x76, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x76, 0x5f, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x76, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x6e,
	0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x76, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x76, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x76, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x70, 0x76, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x76, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x70, 0x76, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x76, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x76, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x76, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x76, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x69, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6d, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xf8, 0x02, 0x0a, 0x0e, 0x52, 0x65, 0x61,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x44, 0x54, 0x4f, 0x12, 0x15, 0x0a, 0x06, 0x64,
	0x74, 0x75, 0x5f, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x74, 0x75,
	0x53, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x76, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x76, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x63, 0x73, 0x71, 0x12, 0x2b, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x4d, 0x4f, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x22, 0x0a, 0x07, 0x72, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x52, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x4f, 0x52, 0x06, 0x72,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x07, 0x70, 0x76, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x50, 0x76, 0x44, 0x61, 0x74, 0x61, 0x4d,
	0x4f, 0x52, 0x06, 0x70, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x9e, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x44, 0x54, 0x4f, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x79,
	0x6d, 0x64, 0x5f, 0x68, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x59, 0x6d, 0x64, 0x48, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x77, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x42, 0x23, 0x5a, 0x0f, 0x68, 0x6f, 0x79, 0x6d, 0x69, 0x6c, 0x65, 0x73,
	0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xaa, 0x02, 0x0f, 0x48, 0x6f, 0x79, 0x6d, 0x69, 0x6c,
	0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_protos_RealData_proto_rawDescOnce sync.Once
	file_protos_RealData_proto_rawDescData = file_protos_RealData_proto_rawDesc
)

func file_protos_RealData_proto_rawDescGZIP() []byte {
	file_protos_RealData_proto_rawDescOnce.Do(func() {
		file_protos_RealData_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_RealData_proto_rawDescData)
	})
	return file_protos_RealData_proto_rawDescData
}

var file_protos_RealData_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_protos_RealData_proto_goTypes = []any{
	(*MeterDataMO)(nil),    // 0: MeterDataMO
	(*RpDataMO)(nil),       // 1: RpDataMO
	(*PvDataMO)(nil),       // 2: PvDataMO
	(*RealDataReqDTO)(nil), // 3: RealDataReqDTO
	(*RealDataResDTO)(nil), // 4: RealDataResDTO
}
var file_protos_RealData_proto_depIdxs = []int32{
	0, // 0: RealDataReqDTO.meter_data:type_name -> MeterDataMO
	1, // 1: RealDataReqDTO.rp_data:type_name -> RpDataMO
	2, // 2: RealDataReqDTO.pv_data:type_name -> PvDataMO
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_protos_RealData_proto_init() }
func file_protos_RealData_proto_init() {
	if File_protos_RealData_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_RealData_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MeterDataMO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealData_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RpDataMO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealData_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PvDataMO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealData_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*RealDataReqDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealData_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*RealDataResDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_RealData_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_RealData_proto_goTypes,
		DependencyIndexes: file_protos_RealData_proto_depIdxs,
		MessageInfos:      file_protos_RealData_proto_msgTypes,
	}.Build()
	File_protos_RealData_proto = out.File
	file_protos_RealData_proto_rawDesc = nil
	file_protos_RealData_proto_goTypes = nil
	file_protos_RealData_proto_depIdxs = nil
}
