// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.0
// source: protos/RealDataNew.proto

package models

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeterMO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceType            int32 `protobuf:"varint,1,opt,name=device_type,json=deviceType,proto3" json:"device_type,omitempty"`                                    // Device type identifier
	SerialNumber          int64 `protobuf:"varint,2,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                              // Serial number of the meter
	PhaseTotalPower       int32 `protobuf:"varint,3,opt,name=phase_total_power,json=phaseTotalPower,proto3" json:"phase_total_power,omitempty"`                   // Total power across all phases (Watts)
	Phase_APower          int32 `protobuf:"varint,4,opt,name=phase_A_power,json=phaseAPower,proto3" json:"phase_A_power,omitempty"`                               // Power in phase A (Watts)
	Phase_BPower          int32 `protobuf:"varint,5,opt,name=phase_B_power,json=phaseBPower,proto3" json:"phase_B_power,omitempty"`                               // Power in phase B (Watts)
	Phase_CPower          int32 `protobuf:"varint,6,opt,name=phase_C_power,json=phaseCPower,proto3" json:"phase_C_power,omitempty"`                               // Power in phase C (Watts)
	PowerFactorTotal      int32 `protobuf:"varint,7,opt,name=power_factor_total,json=powerFactorTotal,proto3" json:"power_factor_total,omitempty"`                // Total power factor
	EnergyTotalPower      int32 `protobuf:"varint,8,opt,name=energy_total_power,json=energyTotalPower,proto3" json:"energy_total_power,omitempty"`                // Total energy generated (Watt-hours)
	EnergyPhase_A         int32 `protobuf:"varint,9,opt,name=energy_phase_A,json=energyPhaseA,proto3" json:"energy_phase_A,omitempty"`                            // Energy generated in phase A (Watt-hours)
	EnergyPhase_B         int32 `protobuf:"varint,10,opt,name=energy_phase_B,json=energyPhaseB,proto3" json:"energy_phase_B,omitempty"`                           // Energy generated in phase B (Watt-hours)
	EnergyPhase_C         int32 `protobuf:"varint,11,opt,name=energy_phase_C,json=energyPhaseC,proto3" json:"energy_phase_C,omitempty"`                           // Energy generated in phase C (Watt-hours)
	EnergyTotalConsumed   int32 `protobuf:"varint,12,opt,name=energy_total_consumed,json=energyTotalConsumed,proto3" json:"energy_total_consumed,omitempty"`      // Total energy consumed (Watt-hours)
	EnergyPhase_AConsumed int32 `protobuf:"varint,13,opt,name=energy_phase_A_consumed,json=energyPhaseAConsumed,proto3" json:"energy_phase_A_consumed,omitempty"` // Energy consumed in phase A (Watt-hours)
	EnergyPhase_BConsumed int32 `protobuf:"varint,14,opt,name=energy_phase_B_consumed,json=energyPhaseBConsumed,proto3" json:"energy_phase_B_consumed,omitempty"` // Energy consumed in phase B (Watt-hours)
	EnergyPhase_CConsumed int32 `protobuf:"varint,15,opt,name=energy_phase_C_consumed,json=energyPhaseCConsumed,proto3" json:"energy_phase_C_consumed,omitempty"` // Energy consumed in phase C (Watt-hours)
	FaultCode             int32 `protobuf:"varint,16,opt,name=fault_code,json=faultCode,proto3" json:"fault_code,omitempty"`                                      // Fault code indicator
	VoltagePhase_A        int32 `protobuf:"varint,17,opt,name=voltage_phase_A,json=voltagePhaseA,proto3" json:"voltage_phase_A,omitempty"`                        // Voltage in phase A (Volts)
	VoltagePhase_B        int32 `protobuf:"varint,18,opt,name=voltage_phase_B,json=voltagePhaseB,proto3" json:"voltage_phase_B,omitempty"`                        // Voltage in phase B (Volts)
	VoltagePhase_C        int32 `protobuf:"varint,19,opt,name=voltage_phase_C,json=voltagePhaseC,proto3" json:"voltage_phase_C,omitempty"`                        // Voltage in phase C (Volts)
	CurrentPhase_A        int32 `protobuf:"varint,20,opt,name=current_phase_A,json=currentPhaseA,proto3" json:"current_phase_A,omitempty"`                        // Current in phase A (Amperes)
	CurrentPhase_B        int32 `protobuf:"varint,21,opt,name=current_phase_B,json=currentPhaseB,proto3" json:"current_phase_B,omitempty"`                        // Current in phase B (Amperes)
	CurrentPhase_C        int32 `protobuf:"varint,22,opt,name=current_phase_C,json=currentPhaseC,proto3" json:"current_phase_C,omitempty"`                        // Current in phase C (Amperes)
	PowerFactorPhase_A    int32 `protobuf:"varint,23,opt,name=power_factor_phase_A,json=powerFactorPhaseA,proto3" json:"power_factor_phase_A,omitempty"`          // Power factor in phase A
	PowerFactorPhase_B    int32 `protobuf:"varint,24,opt,name=power_factor_phase_B,json=powerFactorPhaseB,proto3" json:"power_factor_phase_B,omitempty"`          // Power factor in phase B
	PowerFactorPhase_C    int32 `protobuf:"varint,25,opt,name=power_factor_phase_C,json=powerFactorPhaseC,proto3" json:"power_factor_phase_C,omitempty"`          // Power factor in phase C
}

func (x *MeterMO) Reset() {
	*x = MeterMO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealDataNew_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeterMO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterMO) ProtoMessage() {}

func (x *MeterMO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealDataNew_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterMO.ProtoReflect.Descriptor instead.
func (*MeterMO) Descriptor() ([]byte, []int) {
	return file_protos_RealDataNew_proto_rawDescGZIP(), []int{0}
}

func (x *MeterMO) GetDeviceType() int32 {
	if x != nil {
		return x.DeviceType
	}
	return 0
}

func (x *MeterMO) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *MeterMO) GetPhaseTotalPower() int32 {
	if x != nil {
		return x.PhaseTotalPower
	}
	return 0
}

func (x *MeterMO) GetPhase_APower() int32 {
	if x != nil {
		return x.Phase_APower
	}
	return 0
}

func (x *MeterMO) GetPhase_BPower() int32 {
	if x != nil {
		return x.Phase_BPower
	}
	return 0
}

func (x *MeterMO) GetPhase_CPower() int32 {
	if x != nil {
		return x.Phase_CPower
	}
	return 0
}

func (x *MeterMO) GetPowerFactorTotal() int32 {
	if x != nil {
		return x.PowerFactorTotal
	}
	return 0
}

func (x *MeterMO) GetEnergyTotalPower() int32 {
	if x != nil {
		return x.EnergyTotalPower
	}
	return 0
}

func (x *MeterMO) GetEnergyPhase_A() int32 {
	if x != nil {
		return x.EnergyPhase_A
	}
	return 0
}

func (x *MeterMO) GetEnergyPhase_B() int32 {
	if x != nil {
		return x.EnergyPhase_B
	}
	return 0
}

func (x *MeterMO) GetEnergyPhase_C() int32 {
	if x != nil {
		return x.EnergyPhase_C
	}
	return 0
}

func (x *MeterMO) GetEnergyTotalConsumed() int32 {
	if x != nil {
		return x.EnergyTotalConsumed
	}
	return 0
}

func (x *MeterMO) GetEnergyPhase_AConsumed() int32 {
	if x != nil {
		return x.EnergyPhase_AConsumed
	}
	return 0
}

func (x *MeterMO) GetEnergyPhase_BConsumed() int32 {
	if x != nil {
		return x.EnergyPhase_BConsumed
	}
	return 0
}

func (x *MeterMO) GetEnergyPhase_CConsumed() int32 {
	if x != nil {
		return x.EnergyPhase_CConsumed
	}
	return 0
}

func (x *MeterMO) GetFaultCode() int32 {
	if x != nil {
		return x.FaultCode
	}
	return 0
}

func (x *MeterMO) GetVoltagePhase_A() int32 {
	if x != nil {
		return x.VoltagePhase_A
	}
	return 0
}

func (x *MeterMO) GetVoltagePhase_B() int32 {
	if x != nil {
		return x.VoltagePhase_B
	}
	return 0
}

func (x *MeterMO) GetVoltagePhase_C() int32 {
	if x != nil {
		return x.VoltagePhase_C
	}
	return 0
}

func (x *MeterMO) GetCurrentPhase_A() int32 {
	if x != nil {
		return x.CurrentPhase_A
	}
	return 0
}

func (x *MeterMO) GetCurrentPhase_B() int32 {
	if x != nil {
		return x.CurrentPhase_B
	}
	return 0
}

func (x *MeterMO) GetCurrentPhase_C() int32 {
	if x != nil {
		return x.CurrentPhase_C
	}
	return 0
}

func (x *MeterMO) GetPowerFactorPhase_A() int32 {
	if x != nil {
		return x.PowerFactorPhase_A
	}
	return 0
}

func (x *MeterMO) GetPowerFactorPhase_B() int32 {
	if x != nil {
		return x.PowerFactorPhase_B
	}
	return 0
}

func (x *MeterMO) GetPowerFactorPhase_C() int32 {
	if x != nil {
		return x.PowerFactorPhase_C
	}
	return 0
}

type RpMO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber int64 `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // Serial number of the device
	Signature    int32 `protobuf:"varint,2,opt,name=signature,proto3" json:"signature,omitempty"`                           // Signature value
	Channel      int32 `protobuf:"varint,3,opt,name=channel,proto3" json:"channel,omitempty"`                               // Channel number
	PvNumber     int32 `protobuf:"varint,4,opt,name=pv_number,json=pvNumber,proto3" json:"pv_number,omitempty"`             // Photovoltaic (PV) number
	LinkStatus   int32 `protobuf:"varint,5,opt,name=link_status,json=linkStatus,proto3" json:"link_status,omitempty"`       // Link status indicator
}

func (x *RpMO) Reset() {
	*x = RpMO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealDataNew_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpMO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpMO) ProtoMessage() {}

func (x *RpMO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealDataNew_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpMO.ProtoReflect.Descriptor instead.
func (*RpMO) Descriptor() ([]byte, []int) {
	return file_protos_RealDataNew_proto_rawDescGZIP(), []int{1}
}

func (x *RpMO) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *RpMO) GetSignature() int32 {
	if x != nil {
		return x.Signature
	}
	return 0
}

func (x *RpMO) GetChannel() int32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *RpMO) GetPvNumber() int32 {
	if x != nil {
		return x.PvNumber
	}
	return 0
}

func (x *RpMO) GetLinkStatus() int32 {
	if x != nil {
		return x.LinkStatus
	}
	return 0
}

type RSDMO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber    int64 `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`          // Serial number of the device
	FirmwareVersion int32 `protobuf:"varint,2,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"` // Firmware version
	Voltage         int32 `protobuf:"varint,3,opt,name=voltage,proto3" json:"voltage,omitempty"`                                        // Voltage value
	Power           int32 `protobuf:"varint,4,opt,name=power,proto3" json:"power,omitempty"`                                            // Power value
	Temperature     int32 `protobuf:"varint,5,opt,name=temperature,proto3" json:"temperature,omitempty"`                                // Temperature value
	WarningNumber   int32 `protobuf:"varint,6,opt,name=warning_number,json=warningNumber,proto3" json:"warning_number,omitempty"`       // Warning number
	CrcChecksum     int32 `protobuf:"varint,7,opt,name=crc_checksum,json=crcChecksum,proto3" json:"crc_checksum,omitempty"`             // CRC checksum
	LinkStatus      int32 `protobuf:"varint,8,opt,name=link_status,json=linkStatus,proto3" json:"link_status,omitempty"`                // Link status indicator
}

func (x *RSDMO) Reset() {
	*x = RSDMO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealDataNew_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RSDMO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RSDMO) ProtoMessage() {}

func (x *RSDMO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealDataNew_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RSDMO.ProtoReflect.Descriptor instead.
func (*RSDMO) Descriptor() ([]byte, []int) {
	return file_protos_RealDataNew_proto_rawDescGZIP(), []int{2}
}

func (x *RSDMO) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *RSDMO) GetFirmwareVersion() int32 {
	if x != nil {
		return x.FirmwareVersion
	}
	return 0
}

func (x *RSDMO) GetVoltage() int32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *RSDMO) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *RSDMO) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *RSDMO) GetWarningNumber() int32 {
	if x != nil {
		return x.WarningNumber
	}
	return 0
}

func (x *RSDMO) GetCrcChecksum() int32 {
	if x != nil {
		return x.CrcChecksum
	}
	return 0
}

func (x *RSDMO) GetLinkStatus() int32 {
	if x != nil {
		return x.LinkStatus
	}
	return 0
}

type SGSMO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber          int64 `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                               // Serial number of the device
	FirmwareVersion       int32 `protobuf:"varint,2,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`                      // Firmware version
	Voltage               int32 `protobuf:"varint,3,opt,name=voltage,proto3" json:"voltage,omitempty"`                                                             // Grid voltage (Volts)
	Frequency             int32 `protobuf:"varint,4,opt,name=frequency,proto3" json:"frequency,omitempty"`                                                         // Grid frequency (Hertz)
	ActivePower           int32 `protobuf:"varint,5,opt,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`                                  // Active power (Watts)
	ReactivePower         int32 `protobuf:"varint,6,opt,name=reactive_power,json=reactivePower,proto3" json:"reactive_power,omitempty"`                            // Reactive power (VAR)
	Current               int32 `protobuf:"varint,7,opt,name=current,proto3" json:"current,omitempty"`                                                             // Current (Amperes)
	PowerFactor           int32 `protobuf:"varint,8,opt,name=power_factor,json=powerFactor,proto3" json:"power_factor,omitempty"`                                  // Power factor
	Temperature           int32 `protobuf:"varint,9,opt,name=temperature,proto3" json:"temperature,omitempty"`                                                     // Temperature value
	WarningNumber         int32 `protobuf:"varint,10,opt,name=warning_number,json=warningNumber,proto3" json:"warning_number,omitempty"`                           // Warning number
	CrcChecksum           int32 `protobuf:"varint,11,opt,name=crc_checksum,json=crcChecksum,proto3" json:"crc_checksum,omitempty"`                                 // CRC checksum
	LinkStatus            int32 `protobuf:"varint,12,opt,name=link_status,json=linkStatus,proto3" json:"link_status,omitempty"`                                    // Link status indicator
	PowerLimit            int32 `protobuf:"varint,13,opt,name=power_limit,json=powerLimit,proto3" json:"power_limit,omitempty"`                                    // Power limit (Watts)
	ModulationIndexSignal int32 `protobuf:"varint,20,opt,name=modulation_index_signal,json=modulationIndexSignal,proto3" json:"modulation_index_signal,omitempty"` // Modulation index signal
}

func (x *SGSMO) Reset() {
	*x = SGSMO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealDataNew_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SGSMO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SGSMO) ProtoMessage() {}

func (x *SGSMO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealDataNew_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SGSMO.ProtoReflect.Descriptor instead.
func (*SGSMO) Descriptor() ([]byte, []int) {
	return file_protos_RealDataNew_proto_rawDescGZIP(), []int{3}
}

func (x *SGSMO) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *SGSMO) GetFirmwareVersion() int32 {
	if x != nil {
		return x.FirmwareVersion
	}
	return 0
}

func (x *SGSMO) GetVoltage() int32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *SGSMO) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *SGSMO) GetActivePower() int32 {
	if x != nil {
		return x.ActivePower
	}
	return 0
}

func (x *SGSMO) GetReactivePower() int32 {
	if x != nil {
		return x.ReactivePower
	}
	return 0
}

func (x *SGSMO) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *SGSMO) GetPowerFactor() int32 {
	if x != nil {
		return x.PowerFactor
	}
	return 0
}

func (x *SGSMO) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *SGSMO) GetWarningNumber() int32 {
	if x != nil {
		return x.WarningNumber
	}
	return 0
}

func (x *SGSMO) GetCrcChecksum() int32 {
	if x != nil {
		return x.CrcChecksum
	}
	return 0
}

func (x *SGSMO) GetLinkStatus() int32 {
	if x != nil {
		return x.LinkStatus
	}
	return 0
}

func (x *SGSMO) GetPowerLimit() int32 {
	if x != nil {
		return x.PowerLimit
	}
	return 0
}

func (x *SGSMO) GetModulationIndexSignal() int32 {
	if x != nil {
		return x.ModulationIndexSignal
	}
	return 0
}

type TGSMO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber          int64 `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`                               // Serial number of the device
	FirmwareVersion       int32 `protobuf:"varint,2,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`                      // Firmware version
	VoltagePhase_A        int32 `protobuf:"varint,3,opt,name=voltage_phase_A,json=voltagePhaseA,proto3" json:"voltage_phase_A,omitempty"`                          // Voltage in phase A (Volts)
	VoltagePhase_B        int32 `protobuf:"varint,4,opt,name=voltage_phase_B,json=voltagePhaseB,proto3" json:"voltage_phase_B,omitempty"`                          // Voltage in phase B (Volts)
	VoltagePhase_C        int32 `protobuf:"varint,5,opt,name=voltage_phase_C,json=voltagePhaseC,proto3" json:"voltage_phase_C,omitempty"`                          // Voltage in phase C (Volts)
	VoltageLine_AB        int32 `protobuf:"varint,6,opt,name=voltage_line_AB,json=voltageLineAB,proto3" json:"voltage_line_AB,omitempty"`                          // Voltage between lines A and B (Volts)
	VoltageLine_BC        int32 `protobuf:"varint,7,opt,name=voltage_line_BC,json=voltageLineBC,proto3" json:"voltage_line_BC,omitempty"`                          // Voltage between lines B and C (Volts)
	VoltageLine_CA        int32 `protobuf:"varint,8,opt,name=voltage_line_CA,json=voltageLineCA,proto3" json:"voltage_line_CA,omitempty"`                          // Voltage between lines C and A (Volts)
	Frequency             int32 `protobuf:"varint,9,opt,name=frequency,proto3" json:"frequency,omitempty"`                                                         // Frequency (Hertz)
	ActivePower           int32 `protobuf:"varint,10,opt,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`                                 // Active power (Watts)
	ReactivePower         int32 `protobuf:"varint,11,opt,name=reactive_power,json=reactivePower,proto3" json:"reactive_power,omitempty"`                           // Reactive power (VAR)
	CurrentPhase_A        int32 `protobuf:"varint,12,opt,name=current_phase_A,json=currentPhaseA,proto3" json:"current_phase_A,omitempty"`                         // Current in phase A (Amperes)
	CurrentPhase_B        int32 `protobuf:"varint,13,opt,name=current_phase_B,json=currentPhaseB,proto3" json:"current_phase_B,omitempty"`                         // Current in phase B (Amperes)
	CurrentPhase_C        int32 `protobuf:"varint,14,opt,name=current_phase_C,json=currentPhaseC,proto3" json:"current_phase_C,omitempty"`                         // Current in phase C (Amperes)
	PowerFactor           int32 `protobuf:"varint,15,opt,name=power_factor,json=powerFactor,proto3" json:"power_factor,omitempty"`                                 // Power factor
	Temperature           int32 `protobuf:"varint,16,opt,name=temperature,proto3" json:"temperature,omitempty"`                                                    // Temperature value
	WarningNumber         int32 `protobuf:"varint,17,opt,name=warning_number,json=warningNumber,proto3" json:"warning_number,omitempty"`                           // Warning number
	CrcChecksum           int32 `protobuf:"varint,18,opt,name=crc_checksum,json=crcChecksum,proto3" json:"crc_checksum,omitempty"`                                 // CRC checksum
	LinkStatus            int32 `protobuf:"varint,19,opt,name=link_status,json=linkStatus,proto3" json:"link_status,omitempty"`                                    // Link status indicator
	ModulationIndexSignal int32 `protobuf:"varint,20,opt,name=modulation_index_signal,json=modulationIndexSignal,proto3" json:"modulation_index_signal,omitempty"` // Modulation index signal
}

func (x *TGSMO) Reset() {
	*x = TGSMO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealDataNew_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TGSMO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TGSMO) ProtoMessage() {}

func (x *TGSMO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealDataNew_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TGSMO.ProtoReflect.Descriptor instead.
func (*TGSMO) Descriptor() ([]byte, []int) {
	return file_protos_RealDataNew_proto_rawDescGZIP(), []int{4}
}

func (x *TGSMO) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *TGSMO) GetFirmwareVersion() int32 {
	if x != nil {
		return x.FirmwareVersion
	}
	return 0
}

func (x *TGSMO) GetVoltagePhase_A() int32 {
	if x != nil {
		return x.VoltagePhase_A
	}
	return 0
}

func (x *TGSMO) GetVoltagePhase_B() int32 {
	if x != nil {
		return x.VoltagePhase_B
	}
	return 0
}

func (x *TGSMO) GetVoltagePhase_C() int32 {
	if x != nil {
		return x.VoltagePhase_C
	}
	return 0
}

func (x *TGSMO) GetVoltageLine_AB() int32 {
	if x != nil {
		return x.VoltageLine_AB
	}
	return 0
}

func (x *TGSMO) GetVoltageLine_BC() int32 {
	if x != nil {
		return x.VoltageLine_BC
	}
	return 0
}

func (x *TGSMO) GetVoltageLine_CA() int32 {
	if x != nil {
		return x.VoltageLine_CA
	}
	return 0
}

func (x *TGSMO) GetFrequency() int32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *TGSMO) GetActivePower() int32 {
	if x != nil {
		return x.ActivePower
	}
	return 0
}

func (x *TGSMO) GetReactivePower() int32 {
	if x != nil {
		return x.ReactivePower
	}
	return 0
}

func (x *TGSMO) GetCurrentPhase_A() int32 {
	if x != nil {
		return x.CurrentPhase_A
	}
	return 0
}

func (x *TGSMO) GetCurrentPhase_B() int32 {
	if x != nil {
		return x.CurrentPhase_B
	}
	return 0
}

func (x *TGSMO) GetCurrentPhase_C() int32 {
	if x != nil {
		return x.CurrentPhase_C
	}
	return 0
}

func (x *TGSMO) GetPowerFactor() int32 {
	if x != nil {
		return x.PowerFactor
	}
	return 0
}

func (x *TGSMO) GetTemperature() int32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *TGSMO) GetWarningNumber() int32 {
	if x != nil {
		return x.WarningNumber
	}
	return 0
}

func (x *TGSMO) GetCrcChecksum() int32 {
	if x != nil {
		return x.CrcChecksum
	}
	return 0
}

func (x *TGSMO) GetLinkStatus() int32 {
	if x != nil {
		return x.LinkStatus
	}
	return 0
}

func (x *TGSMO) GetModulationIndexSignal() int32 {
	if x != nil {
		return x.ModulationIndexSignal
	}
	return 0
}

type PvMO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerialNumber int64 `protobuf:"varint,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"` // Serial number of the device
	PortNumber   int32 `protobuf:"varint,2,opt,name=port_number,json=portNumber,proto3" json:"port_number,omitempty"`       // Port number
	Voltage      int32 `protobuf:"varint,3,opt,name=voltage,proto3" json:"voltage,omitempty"`                               // Voltage (Volts)
	Current      int32 `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`                               // Current (Amperes)
	Power        int32 `protobuf:"varint,5,opt,name=power,proto3" json:"power,omitempty"`                                   // Power (Watts)
	EnergyTotal  int32 `protobuf:"varint,6,opt,name=energy_total,json=energyTotal,proto3" json:"energy_total,omitempty"`    // Total energy generated (Watt-hours)
	EnergyDaily  int32 `protobuf:"varint,7,opt,name=energy_daily,json=energyDaily,proto3" json:"energy_daily,omitempty"`    // Daily energy generated (Watt-hours)
	ErrorCode    int32 `protobuf:"varint,8,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`          // Error code indicator
}

func (x *PvMO) Reset() {
	*x = PvMO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealDataNew_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PvMO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PvMO) ProtoMessage() {}

func (x *PvMO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealDataNew_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PvMO.ProtoReflect.Descriptor instead.
func (*PvMO) Descriptor() ([]byte, []int) {
	return file_protos_RealDataNew_proto_rawDescGZIP(), []int{5}
}

func (x *PvMO) GetSerialNumber() int64 {
	if x != nil {
		return x.SerialNumber
	}
	return 0
}

func (x *PvMO) GetPortNumber() int32 {
	if x != nil {
		return x.PortNumber
	}
	return 0
}

func (x *PvMO) GetVoltage() int32 {
	if x != nil {
		return x.Voltage
	}
	return 0
}

func (x *PvMO) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *PvMO) GetPower() int32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *PvMO) GetEnergyTotal() int32 {
	if x != nil {
		return x.EnergyTotal
	}
	return 0
}

func (x *PvMO) GetEnergyDaily() int32 {
	if x != nil {
		return x.EnergyDaily
	}
	return 0
}

func (x *PvMO) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

type RealDataNewResDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceSerialNumber string     `protobuf:"bytes,1,opt,name=device_serial_number,json=deviceSerialNumber,proto3" json:"device_serial_number,omitempty"` // Serial number of the device
	Timestamp          int32      `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                              // Timestamp of the data
	ActivePower        int32      `protobuf:"varint,3,opt,name=active_power,json=activePower,proto3" json:"active_power,omitempty"`                       // Active power (Watts)
	Cp                 int32      `protobuf:"varint,4,opt,name=cp,proto3" json:"cp,omitempty"`                                                            // Control parameter?
	FirmwareVersion    int32      `protobuf:"varint,5,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`           // Firmware version
	MeterData          []*MeterMO `protobuf:"bytes,6,rep,name=meter_data,json=meterData,proto3" json:"meter_data,omitempty"`                              // Meter data array
	RpData             []*RpMO    `protobuf:"bytes,7,rep,name=rp_data,json=rpData,proto3" json:"rp_data,omitempty"`                                       // RpMO data array
	RsdData            []*RSDMO   `protobuf:"bytes,8,rep,name=rsd_data,json=rsdData,proto3" json:"rsd_data,omitempty"`                                    // RSDMO data array
	SgsData            []*SGSMO   `protobuf:"bytes,9,rep,name=sgs_data,json=sgsData,proto3" json:"sgs_data,omitempty"`                                    // SGSMO data array
	TgsData            []*TGSMO   `protobuf:"bytes,10,rep,name=tgs_data,json=tgsData,proto3" json:"tgs_data,omitempty"`                                   // TGSMO data array
	PvData             []*PvMO    `protobuf:"bytes,11,rep,name=pv_data,json=pvData,proto3" json:"pv_data,omitempty"`                                      // PvMO data array
	DtuPower           uint64     `protobuf:"varint,12,opt,name=dtu_power,json=dtuPower,proto3" json:"dtu_power,omitempty"`                               // Power of the DTU (Watts)
	DtuDailyEnergy     uint64     `protobuf:"varint,13,opt,name=dtu_daily_energy,json=dtuDailyEnergy,proto3" json:"dtu_daily_energy,omitempty"`           // Daily energy of the DTU (Watt-hours)
}

func (x *RealDataNewResDTO) Reset() {
	*x = RealDataNewResDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealDataNew_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealDataNewResDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealDataNewResDTO) ProtoMessage() {}

func (x *RealDataNewResDTO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealDataNew_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealDataNewResDTO.ProtoReflect.Descriptor instead.
func (*RealDataNewResDTO) Descriptor() ([]byte, []int) {
	return file_protos_RealDataNew_proto_rawDescGZIP(), []int{6}
}

func (x *RealDataNewResDTO) GetDeviceSerialNumber() string {
	if x != nil {
		return x.DeviceSerialNumber
	}
	return ""
}

func (x *RealDataNewResDTO) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RealDataNewResDTO) GetActivePower() int32 {
	if x != nil {
		return x.ActivePower
	}
	return 0
}

func (x *RealDataNewResDTO) GetCp() int32 {
	if x != nil {
		return x.Cp
	}
	return 0
}

func (x *RealDataNewResDTO) GetFirmwareVersion() int32 {
	if x != nil {
		return x.FirmwareVersion
	}
	return 0
}

func (x *RealDataNewResDTO) GetMeterData() []*MeterMO {
	if x != nil {
		return x.MeterData
	}
	return nil
}

func (x *RealDataNewResDTO) GetRpData() []*RpMO {
	if x != nil {
		return x.RpData
	}
	return nil
}

func (x *RealDataNewResDTO) GetRsdData() []*RSDMO {
	if x != nil {
		return x.RsdData
	}
	return nil
}

func (x *RealDataNewResDTO) GetSgsData() []*SGSMO {
	if x != nil {
		return x.SgsData
	}
	return nil
}

func (x *RealDataNewResDTO) GetTgsData() []*TGSMO {
	if x != nil {
		return x.TgsData
	}
	return nil
}

func (x *RealDataNewResDTO) GetPvData() []*PvMO {
	if x != nil {
		return x.PvData
	}
	return nil
}

func (x *RealDataNewResDTO) GetDtuPower() uint64 {
	if x != nil {
		return x.DtuPower
	}
	return 0
}

func (x *RealDataNewResDTO) GetDtuDailyEnergy() uint64 {
	if x != nil {
		return x.DtuDailyEnergy
	}
	return 0
}

type RealDataNewReqDTO struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeYmdHms string `protobuf:"bytes,1,opt,name=time_ymd_hms,json=timeYmdHms,proto3" json:"time_ymd_hms,omitempty"` // Timestamp in the format YMD_HMS
	Cp         int32  `protobuf:"varint,2,opt,name=cp,proto3" json:"cp,omitempty"`                                    // Control parameter?
	ErrorCode  int32  `protobuf:"varint,3,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`     // Error code indicator
	Offset     int32  `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`                            // Offset value
	Time       int32  `protobuf:"varint,5,opt,name=time,proto3" json:"time,omitempty"`                                // Timestamp value
}

func (x *RealDataNewReqDTO) Reset() {
	*x = RealDataNewReqDTO{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_RealDataNew_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealDataNewReqDTO) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealDataNewReqDTO) ProtoMessage() {}

func (x *RealDataNewReqDTO) ProtoReflect() protoreflect.Message {
	mi := &file_protos_RealDataNew_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealDataNewReqDTO.ProtoReflect.Descriptor instead.
func (*RealDataNewReqDTO) Descriptor() ([]byte, []int) {
	return file_protos_RealDataNew_proto_rawDescGZIP(), []int{7}
}

func (x *RealDataNewReqDTO) GetTimeYmdHms() string {
	if x != nil {
		return x.TimeYmdHms
	}
	return ""
}

func (x *RealDataNewReqDTO) GetCp() int32 {
	if x != nil {
		return x.Cp
	}
	return 0
}

func (x *RealDataNewReqDTO) GetErrorCode() int32 {
	if x != nil {
		return x.ErrorCode
	}
	return 0
}

func (x *RealDataNewReqDTO) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *RealDataNewReqDTO) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

var File_protos_RealDataNew_proto protoreflect.FileDescriptor

var file_protos_RealDataNew_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x52, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x08, 0x0a, 0x07, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x4d, 0x4f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x41, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x41, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d,
	0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x42, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x42, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0d, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x43, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x68, 0x61, 0x73, 0x65, 0x43, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x41, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x12, 0x24, 0x0a, 0x0e, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x42, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x12, 0x24, 0x0a, 0x0e,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x43, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x13, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x41, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x41, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x17, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x42, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x5f, 0x43, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x43, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x41, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x41, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x42, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x43, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x43, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x41, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x42, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x42, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x43, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x12, 0x2f, 0x0a, 0x14, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x41, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x12, 0x2f, 0x0a, 0x14, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x42, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x12, 0x2f, 0x0a, 0x14,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x43, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x22, 0xa1, 0x01,
	0x0a, 0x04, 0x52, 0x70, 0x4d, 0x4f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x76, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x76, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x94, 0x02, 0x0a, 0x05, 0x52, 0x53, 0x44, 0x4d, 0x4f, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x63, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xfc, 0x03, 0x0a, 0x05, 0x53, 0x47, 0x53,
	0x4d, 0x4f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72,
	0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x63, 0x72, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x36, 0x0a, 0x17, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x15, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0x8f, 0x06, 0x0a, 0x05, 0x54, 0x47, 0x53, 0x4d,
	0x4f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x41, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x42, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x42, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x43, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x50, 0x68, 0x61, 0x73, 0x65, 0x43, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x41, 0x42, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x41,
	0x42, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x42, 0x43, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x42, 0x43, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x43, 0x41, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x43,
	0x41, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x41, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x41, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x42, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x42, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x43, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65,
	0x43, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x72, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x72, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x15, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x22, 0xfb, 0x01, 0x0a, 0x04, 0x50, 0x76,
	0x4d, 0x4f, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x6f,
	0x72, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f,
	0x64, 0x61, 0x69, 0x6c, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xda, 0x03, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x73, 0x44, 0x54, 0x4f, 0x12, 0x30, 0x0a,
	0x14, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x70,
	0x12, 0x29, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d,
	0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0a, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x4d, 0x4f, 0x52, 0x09, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x07, 0x72, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x52, 0x70, 0x4d, 0x4f, 0x52, 0x06, 0x72, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x08, 0x72, 0x73, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x52, 0x53, 0x44, 0x4d, 0x4f, 0x52, 0x07,
	0x72, 0x73, 0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x08, 0x73, 0x67, 0x73, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x53, 0x47, 0x53, 0x4d,
	0x4f, 0x52, 0x07, 0x73, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x08, 0x74, 0x67,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x06, 0x2e, 0x54,
	0x47, 0x53, 0x4d, 0x4f, 0x52, 0x07, 0x74, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x07, 0x70, 0x76, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05,
	0x2e, 0x50, 0x76, 0x4d, 0x4f, 0x52, 0x06, 0x70, 0x76, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x74, 0x75, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x64, 0x74, 0x75, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x74,
	0x75, 0x5f, 0x64, 0x61, 0x69, 0x6c, 0x79, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x64, 0x74, 0x75, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x22, 0x90, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x71, 0x44, 0x54, 0x4f, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x79, 0x6d, 0x64, 0x5f, 0x68, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x59, 0x6d, 0x64, 0x48, 0x6d, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x63, 0x70, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x23, 0x5a, 0x0f, 0x68, 0x6f, 0x79, 0x6d, 0x69,
	0x6c, 0x65, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0xaa, 0x02, 0x0f, 0x48, 0x6f, 0x79,
	0x6d, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_RealDataNew_proto_rawDescOnce sync.Once
	file_protos_RealDataNew_proto_rawDescData = file_protos_RealDataNew_proto_rawDesc
)

func file_protos_RealDataNew_proto_rawDescGZIP() []byte {
	file_protos_RealDataNew_proto_rawDescOnce.Do(func() {
		file_protos_RealDataNew_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_RealDataNew_proto_rawDescData)
	})
	return file_protos_RealDataNew_proto_rawDescData
}

var file_protos_RealDataNew_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_protos_RealDataNew_proto_goTypes = []any{
	(*MeterMO)(nil),           // 0: MeterMO
	(*RpMO)(nil),              // 1: RpMO
	(*RSDMO)(nil),             // 2: RSDMO
	(*SGSMO)(nil),             // 3: SGSMO
	(*TGSMO)(nil),             // 4: TGSMO
	(*PvMO)(nil),              // 5: PvMO
	(*RealDataNewResDTO)(nil), // 6: RealDataNewResDTO
	(*RealDataNewReqDTO)(nil), // 7: RealDataNewReqDTO
}
var file_protos_RealDataNew_proto_depIdxs = []int32{
	0, // 0: RealDataNewResDTO.meter_data:type_name -> MeterMO
	1, // 1: RealDataNewResDTO.rp_data:type_name -> RpMO
	2, // 2: RealDataNewResDTO.rsd_data:type_name -> RSDMO
	3, // 3: RealDataNewResDTO.sgs_data:type_name -> SGSMO
	4, // 4: RealDataNewResDTO.tgs_data:type_name -> TGSMO
	5, // 5: RealDataNewResDTO.pv_data:type_name -> PvMO
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_protos_RealDataNew_proto_init() }
func file_protos_RealDataNew_proto_init() {
	if File_protos_RealDataNew_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_RealDataNew_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*MeterMO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealDataNew_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RpMO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealDataNew_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*RSDMO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealDataNew_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SGSMO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealDataNew_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TGSMO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealDataNew_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*PvMO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealDataNew_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*RealDataNewResDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_RealDataNew_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*RealDataNewReqDTO); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_RealDataNew_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_RealDataNew_proto_goTypes,
		DependencyIndexes: file_protos_RealDataNew_proto_depIdxs,
		MessageInfos:      file_protos_RealDataNew_proto_msgTypes,
	}.Build()
	File_protos_RealDataNew_proto = out.File
	file_protos_RealDataNew_proto_rawDesc = nil
	file_protos_RealDataNew_proto_goTypes = nil
	file_protos_RealDataNew_proto_depIdxs = nil
}
